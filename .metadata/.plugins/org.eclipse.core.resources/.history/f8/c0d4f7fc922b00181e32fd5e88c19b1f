//#include "LPC15xx.h"
#include "type.h"
#include "chip.h"

#include "dcdc.h"

void SCT0_Init(void)
{
	UINT32	periodticks;
	UINT32 buckdutyticks;

    LPC_SYSCON->SYSAHBCLKCTRL[1] |= (1 << 2);                // enable the SCT0 clock
    LPC_SCT0->CONFIG           |= (1 << 17);               // split timers, auto limit
    LPC_SCT0->CTRL_L           |= (1 << 4);                // configure SCT0 as BIDIR

    periodticks = DCDC_OSC_FREQUENCY / (DCDC_SWITCH_FREQUENCY * 2);		/* Periodticks are half the period since timer is up/down */
    periodticks = periodticks & 0xFFFFFFFE; 							// force to even

	buckdutyticks = (periodticks * 200) / 1000;						/* Start buck conveter at 20% duty */

    /* Match 0 resets the counter, and therefore sets the period */
    LPC_SCT0->MATCH[0].L = LPC_SCT0->MATCHREL[0].L       = periodticks;                 // match on PWM period
    LPC_SCT0->EVENT[0].STATE    = 0xFFFFFFFF;              	// event 0 happens in all states
    LPC_SCT0->EVENT[0].CTRL     = 	(0 << 0) 	| 			// Match 0;
    								(1 << 12)	;    		// match only;

    /* Match 1/event 1 is rising edge of buck FET in, boost SR out of phase A */
    LPC_SCT0->MATCH[1].L = LPC_SCT0->MATCHREL[1].L       = (periodticks) - (buckdutyticks - (DCDC_DEADTIME_TICKS/2));
    LPC_SCT0->EVENT[1].STATE    = 0xFFFFFFFF;              	// event 1 happens in all states
    LPC_SCT0->EVENT[1].CTRL     = 	(1 << 0) 	| 			// match 1
    								(1 << 12) 	| 			// match only
									(1 << 21)	;     		// only counting up
    LPC_SCT0->OUT[0].SET        = 	(1 << 1)	;           // event 1 sets   OUT0

    /* Match 2/event 2 is falling edge of buck FET in, boost SR out of phase A */
    LPC_SCT0->MATCH[2].L = LPC_SCT0->MATCHREL[2].L       = (periodticks) - (buckdutyticks - (DCDC_DEADTIME_TICKS/2));
    LPC_SCT0->EVENT[2].STATE    = 0xFFFFFFFF;              // event 2 happens in state 1
    LPC_SCT0->EVENT[2].CTRL     = 	(2 << 0) 	| 			// match 2
    								(1 << 12) 	| 			// match only
									(2 << 21)	;	   		// only counting down
    LPC_SCT0->OUT[0].CLR        = 	(1 << 2)	;           // event 2 clears OUT0		** Should be CLR **

    /* Match 3/event 3 is rising edge of buck SR in, boost FET out of phase A */
    LPC_SCT0->MATCH[3].L = LPC_SCT0->MATCHREL[3].L       = (periodticks) - (buckdutyticks + (DCDC_DEADTIME_TICKS/2));
    LPC_SCT0->EVENT[3].STATE    = 0xFFFFFFFF;              // event 3 happens in state 1
    LPC_SCT0->EVENT[3].CTRL     = 	(3 << 0) 	| 			// match 3
    								(1 << 12) 	| 			// match only
									(1 << 21)	;    		// only counting up
    LPC_SCT0->OUT[1].CLR        = 	(1 << 3)	;           // event 3 clears   OUT1

    /* Match 4/event 4 is falling edge of buck SR in, boost FET out of phase A */
    LPC_SCT0->MATCH[4].L = LPC_SCT0->MATCHREL[4].L       = (periodticks) - (buckdutyticks + (DCDC_DEADTIME_TICKS/2));
    LPC_SCT0->EVENT[4].STATE    = 0xFFFFFFFF;              // event 4 happens in state 0
    LPC_SCT0->EVENT[4].CTRL     = 	(4 << 0) 	| 			// Match 4
    								(1 << 12) 	| 			// match only
									(2 << 21)	;    		// only counting down
    LPC_SCT0->OUT[1].SET        = 	(1 << 4)	;           // event 4 sets OUT1		** Should be SET **

    /* Match 5/event 5 is rising edge of boost SR in, buck FET out of phase A  */
    LPC_SCT0->MATCH[5].L = LPC_SCT0->MATCHREL[5].L       = (periodticks/2) - (DCDC_DEADTIME_TICKS/2);
    LPC_SCT0->EVENT[5].STATE    = 0xFFFFFFFF;              // event 5 happens in all states
    LPC_SCT0->EVENT[5].CTRL     = 	(5 << 0) 	| 			// match 5
									(1 << 12) 	| 			// match only
									(1 << 21)	;     		// only counting up
    LPC_SCT0->OUT[2].SET        = 	(1 << 5)	;           // event 5 clears   OUT2

    /* Match 6/event 6 is falling edge of boost SR in, buck FET out of phase A */
    LPC_SCT0->MATCH[6].L = LPC_SCT0->MATCHREL[6].L       = (periodticks/2) - (DCDC_DEADTIME_TICKS/2);
    LPC_SCT0->EVENT[6].STATE    = 0xFFFFFFFF;              // event 6 happens in all states
    LPC_SCT0->EVENT[6].CTRL     = 	(6 << 0) 	| 			// match 6
									(1 << 12) 	| 			// match only
									(2 << 21)	;	   		// only counting down
    LPC_SCT0->OUT[2].SET        = 	(1 << 6)	;           // event 6 sets OUT2

    /* Match 7/event 7 is rising edge of boost FET in, buck SR out of phase A */
    LPC_SCT0->MATCH[7].L = LPC_SCT0->MATCHREL[7].L       = (periodticks/2) + (DCDC_DEADTIME_TICKS/2);
    LPC_SCT0->EVENT[7].STATE    = 0xFFFFFFFF;              // event 7 happens in all states
    LPC_SCT0->EVENT[7].CTRL     = 	(7 << 0) 	| 			// match 7
									(1 << 12) 	| 			// match only
									(1 << 21)	;    		// only counting up
    LPC_SCT0->OUT[3].CLR        = 	(1 << 7)	;           // event 7 sets   OUT3

    /* Match 8/event 8 is falling edge of boost FET in, buck SR out of phase A */
    LPC_SCT0->MATCH[8].L = LPC_SCT0->MATCHREL[8].L       = (periodticks/2) + (DCDC_DEADTIME_TICKS/2);
    LPC_SCT0->EVENT[8].STATE    = 0xFFFFFFFF;              // event 8 happens in all states
    LPC_SCT0->EVENT[8].CTRL     = 	(8 << 0) 	| 			// Match 8
									(1 << 12) 	| 			// match only
									(2 << 21)	;    		// only counting down
    LPC_SCT0->OUT[3].CLR        = 	(1 << 8)	;           // event 8 clears OUT3

    LPC_SCT0->OUTPUT			= 0;						// Set all outputs off

    //LPC_SCT0->CTRL_L           &= ~(1 << 2);               // start timer
}

void SCT1_Init(void)
{
	UINT32	periodticks;
	UINT32 buckdutyticks;

    LPC_SYSCON->SYSAHBCLKCTRL[1] |= (1 << 3);                // enable the SCT1 clock
    LPC_SCT1->CONFIG           |= (1 << 17);               // split timers, auto limit
    LPC_SCT1->CTRL_L           |= (1 << 4);                // configure SCT0 as BIDIR

    periodticks = DCDC_OSC_FREQUENCY / (DCDC_SWITCH_FREQUENCY * 2);		/* Periodticks are half the period since timer is up/down */
    periodticks = periodticks & 0xFFFFFFFE; 							// force to even

	buckdutyticks = (periodticks * 200) / 1000;						/* Start buck conveter at 20% duty */

    /* Match 0 resets the counter, and therefore sets the period */
    LPC_SCT1->MATCH[0].L = LPC_SCT1->MATCHREL[0].L       = periodticks;                 // match on PWM period
    LPC_SCT1->EVENT[0].STATE    = 0xFFFFFFFF;              	// event 0 happens in all states
    LPC_SCT1->EVENT[0].CTRL     = 	(0 << 0) 	| 			// Match 0;
    								(1 << 12)	;    		// match only;

    /* Match 1/event 1 is rising edge of buck FET in, boost SR out of phase A */
    LPC_SCT1->MATCH[1].L = LPC_SCT1->MATCHREL[1].L       = (periodticks) - (buckdutyticks - (DCDC_DEADTIME_TICKS/2));
    LPC_SCT1->EVENT[1].STATE    = 0xFFFFFFFF;              	// event 1 happens in all states
    LPC_SCT1->EVENT[1].CTRL     = 	(1 << 0) 	| 			// match 1
    								(1 << 12) 	| 			// match only
									(1 << 21)	;     		// only counting up
    LPC_SCT1->OUT[0].SET        = 	(1 << 1)	;           // event 1 sets   OUT0

    /* Match 2/event 2 is falling edge of buck FET in, boost SR out of phase A */
    LPC_SCT1->MATCH[2].L = LPC_SCT1->MATCHREL[2].L       = (periodticks) - (buckdutyticks - (DCDC_DEADTIME_TICKS/2));
    LPC_SCT1->EVENT[2].STATE    = 0xFFFFFFFF;              // event 2 happens in state 1
    LPC_SCT1->EVENT[2].CTRL     = 	(2 << 0) 	| 			// match 2
    								(1 << 12) 	| 			// match only
									(2 << 21)	;	   		// only counting down
    LPC_SCT1->OUT[0].CLR        = 	(1 << 2)	;           // event 2 clears OUT0		** Should be CLR **

    /* Match 3/event 3 is rising edge of buck SR in, boost FET out of phase A */
    LPC_SCT1->MATCH[3].L = LPC_SCT1->MATCHREL[3].L       = (periodticks) - (buckdutyticks + (DCDC_DEADTIME_TICKS/2));
    LPC_SCT1->EVENT[3].STATE    = 0xFFFFFFFF;              // event 3 happens in state 1
    LPC_SCT1->EVENT[3].CTRL     = 	(3 << 0) 	| 			// match 3
    								(1 << 12) 	| 			// match only
									(1 << 21)	;    		// only counting up
    LPC_SCT1->OUT[1].CLR        = 	(1 << 3)	;           // event 3 clears   OUT1

    /* Match 4/event 4 is falling edge of buck SR in, boost FET out of phase A */
    LPC_SCT1->MATCH[4].L = LPC_SCT1->MATCHREL[4].L       = (periodticks) - (buckdutyticks + (DCDC_DEADTIME_TICKS/2));
    LPC_SCT1->EVENT[4].STATE    = 0xFFFFFFFF;              // event 4 happens in state 0
    LPC_SCT1->EVENT[4].CTRL     = 	(4 << 0) 	| 			// Match 4
    								(1 << 12) 	| 			// match only
									(2 << 21)	;    		// only counting down
    LPC_SCT1->OUT[1].SET        = 	(1 << 4)	;           // event 4 sets OUT1		** Should be SET **

    /* Match 5/event 5 is rising edge of boost SR in, buck FET out of phase A  */
    LPC_SCT1->MATCH[5].L = LPC_SCT1->MATCHREL[5].L       = (periodticks/2) - (DCDC_DEADTIME_TICKS/2);
    LPC_SCT1->EVENT[5].STATE    = 0xFFFFFFFF;              // event 5 happens in all states
    LPC_SCT1->EVENT[5].CTRL     = 	(5 << 0) 	| 			// match 5
									(1 << 12) 	| 			// match only
									(1 << 21)	;     		// only counting up
    LPC_SCT1->OUT[2].SET        = 	(1 << 5)	;           // event 5 clears   OUT2

    /* Match 6/event 6 is falling edge of boost SR in, buck FET out of phase A */
    LPC_SCT1->MATCH[6].L = LPC_SCT1->MATCHREL[6].L       = (periodticks/2) - (DCDC_DEADTIME_TICKS/2);
    LPC_SCT1->EVENT[6].STATE    = 0xFFFFFFFF;              // event 6 happens in all states
    LPC_SCT1->EVENT[6].CTRL     = 	(6 << 0) 	| 			// match 6
									(1 << 12) 	| 			// match only
									(2 << 21)	;	   		// only counting down
    LPC_SCT1->OUT[2].SET        = 	(1 << 6)	;           // event 6 sets OUT2

    /* Match 7/event 7 is rising edge of boost FET in, buck SR out of phase A */
    LPC_SCT1->MATCH[7].L = LPC_SCT1->MATCHREL[7].L       = (periodticks/2) + (DCDC_DEADTIME_TICKS/2);
    LPC_SCT1->EVENT[7].STATE    = 0xFFFFFFFF;              // event 7 happens in all states
    LPC_SCT1->EVENT[7].CTRL     = 	(7 << 0) 	| 			// match 7
									(1 << 12) 	| 			// match only
									(1 << 21)	;    		// only counting up
    LPC_SCT1->OUT[3].CLR        = 	(1 << 7)	;           // event 7 sets   OUT3

    /* Match 8/event 8 is falling edge of boost FET in, buck SR out of phase A */
    LPC_SCT1->MATCH[8].L = LPC_SCT1->MATCHREL[8].L       = (periodticks/2) + (DCDC_DEADTIME_TICKS/2);
    LPC_SCT1->EVENT[8].STATE    = 0xFFFFFFFF;              // event 8 happens in all states
    LPC_SCT1->EVENT[8].CTRL     = 	(8 << 0) 	| 			// Match 8
									(1 << 12) 	| 			// match only
									(2 << 21)	;    		// only counting down
    LPC_SCT1->OUT[3].CLR        = 	(1 << 8)	;           // event 8 clears OUT3

    LPC_SCT1->OUTPUT			= 0;						// Set all outputs off
}

void SCT2_Init(void)
{
	UINT32	periodticks;
	UINT32 buckdutyticks;

    LPC_SYSCON->SYSAHBCLKCTRL[1] |= (1 << 4);                // enable the SCT2 clock
    LPC_SCT2->CONFIG           |= (1 << 17);               // split timers, auto limit
    LPC_SCT2->CTRL_L           |= (1 << 4);                // configure SCT0 as BIDIR

    periodticks = DCDC_OSC_FREQUENCY / (DCDC_SWITCH_FREQUENCY * 2);		/* Periodticks are half the period since timer is up/down */
    periodticks = periodticks & 0xFFFFFFFE; 							// force to even

	buckdutyticks = (periodticks * 200) / 1000;						/* Start buck conveter at 20% duty */

    /* Match 0 resets the counter, and therefore sets the period */
    LPC_SCT2->MATCH[0].L = LPC_SCT2->MATCHREL[0].L       = periodticks;                 // match on PWM period
    LPC_SCT2->EVENT[0].STATE    = 0xFFFFFFFF;              	// event 0 happens in all states
    LPC_SCT2->EVENT[0].CTRL     = 	(0 << 0) 	| 			// Match 0;
    								(1 << 12)	;    		// match only;

    /* Match 1/event 1 is rising edge of buck FET in, boost SR out of phase A */
    LPC_SCT2->MATCH[1].L = LPC_SCT2->MATCHREL[1].L       = (periodticks) - (buckdutyticks - (DCDC_DEADTIME_TICKS/2));
    LPC_SCT2->EVENT[1].STATE    = 0xFFFFFFFF;              	// event 1 happens in all states
    LPC_SCT2->EVENT[1].CTRL     = 	(1 << 0) 	| 			// match 1
    								(1 << 12) 	| 			// match only
									(1 << 21)	;     		// only counting up
    LPC_SCT2->OUT[0].SET        = 	(1 << 1)	;           // event 1 sets   OUT0

    /* Match 2/event 2 is falling edge of buck FET in, boost SR out of phase A */
    LPC_SCT2->MATCH[2].L = LPC_SCT2->MATCHREL[2].L       = (periodticks) - (buckdutyticks - (DCDC_DEADTIME_TICKS/2));
    LPC_SCT2->EVENT[2].STATE    = 0xFFFFFFFF;              // event 2 happens in state 1
    LPC_SCT2->EVENT[2].CTRL     = 	(2 << 0) 	| 			// match 2
    								(1 << 12) 	| 			// match only
									(2 << 21)	;	   		// only counting down
    LPC_SCT2->OUT[0].CLR        = 	(1 << 2)	;           // event 2 clears OUT0		** Should be CLR **

    /* Match 3/event 3 is rising edge of buck SR in, boost FET out of phase A */
    LPC_SCT2->MATCH[3].L = LPC_SCT2->MATCHREL[3].L       = (periodticks) - (buckdutyticks + (DCDC_DEADTIME_TICKS/2));
    LPC_SCT2->EVENT[3].STATE    = 0xFFFFFFFF;              // event 3 happens in state 1
    LPC_SCT2->EVENT[3].CTRL     = 	(3 << 0) 	| 			// match 3
    								(1 << 12) 	| 			// match only
									(1 << 21)	;    		// only counting up
    LPC_SCT2->OUT[1].CLR        = 	(1 << 3)	;           // event 3 clears   OUT1

    /* Match 4/event 4 is falling edge of buck SR in, boost FET out of phase A */
    LPC_SCT2->MATCH[4].L = LPC_SCT2->MATCHREL[4].L       = (periodticks) - (buckdutyticks + (DCDC_DEADTIME_TICKS/2));
    LPC_SCT2->EVENT[4].STATE    = 0xFFFFFFFF;              // event 4 happens in state 0
    LPC_SCT2->EVENT[4].CTRL     = 	(4 << 0) 	| 			// Match 4
    								(1 << 12) 	| 			// match only
									(2 << 21)	;    		// only counting down
    LPC_SCT2->OUT[1].SET        = 	(1 << 4)	;           // event 4 sets OUT1		** Should be SET **

    /* Match 5/event 5 is rising edge of boost SR in, buck FET out of phase A  */
    LPC_SCT2->MATCH[5].L = LPC_SCT2->MATCHREL[5].L       = (periodticks/2) - (DCDC_DEADTIME_TICKS/2);
    LPC_SCT2->EVENT[5].STATE    = 0xFFFFFFFF;              // event 5 happens in all states
    LPC_SCT2->EVENT[5].CTRL     = 	(5 << 0) 	| 			// match 5
									(1 << 12) 	| 			// match only
									(1 << 21)	;     		// only counting up
    LPC_SCT2->OUT[2].SET        = 	(1 << 5)	;           // event 5 clears   OUT2

    /* Match 6/event 6 is falling edge of boost SR in, buck FET out of phase A */
    LPC_SCT2->MATCH[6].L = LPC_SCT2->MATCHREL[6].L       = (periodticks/2) - (DCDC_DEADTIME_TICKS/2);
    LPC_SCT2->EVENT[6].STATE    = 0xFFFFFFFF;              // event 6 happens in all states
    LPC_SCT2->EVENT[6].CTRL     = 	(6 << 0) 	| 			// match 6
									(1 << 12) 	| 			// match only
									(2 << 21)	;	   		// only counting down
    LPC_SCT2->OUT[2].SET        = 	(1 << 6)	;           // event 6 sets OUT2

    /* Match 7/event 7 is rising edge of boost FET in, buck SR out of phase A */
    LPC_SCT2->MATCH[7].L = LPC_SCT2->MATCHREL[7].L       = (periodticks/2) + (DCDC_DEADTIME_TICKS/2);
    LPC_SCT2->EVENT[7].STATE    = 0xFFFFFFFF;              // event 7 happens in all states
    LPC_SCT2->EVENT[7].CTRL     = 	(7 << 0) 	| 			// match 7
									(1 << 12) 	| 			// match only
									(1 << 21)	;    		// only counting up
    LPC_SCT2->OUT[3].CLR        = 	(1 << 7)	;           // event 7 sets   OUT3

    /* Match 8/event 8 is falling edge of boost FET in, buck SR out of phase A */
    LPC_SCT2->MATCH[8].L = LPC_SCT2->MATCHREL[8].L       = (periodticks/2) + (DCDC_DEADTIME_TICKS/2);
    LPC_SCT2->EVENT[8].STATE    = 0xFFFFFFFF;              // event 8 happens in all states
    LPC_SCT2->EVENT[8].CTRL     = 	(8 << 0) 	| 			// Match 8
									(1 << 12) 	| 			// match only
									(2 << 21)	;    		// only counting down
    LPC_SCT2->OUT[3].CLR        = 	(1 << 8)	;           // event 8 clears OUT3

    LPC_SCT2->OUTPUT			= 0;						// Set all outputs off
}





